import numpy as np
import scipy as sp


def _get_PLU(A):
    n = A.shape[0]

    U = A.copy()
    L = np.identity(n)
    P = np.identity(n)

    for k in range(0, n - 1):
        max_i = k + np.argmax(abs(U[k:, k]))

        U[[k, max_i]] = U[[max_i, k]]
        L[k][:k], L[max_i][:k] = L[max_i][:k], L[k][:k].copy()
        P[[k, max_i]] = P[[max_i, k]]

        for j in range(k + 1, n):
            L[j, k] = U[j, k] / U[k, k]
            U[j, k:] = U[j, k:] - L[j, k] * U[k, k:]

    return P, L, U


def _solve_straight(A, b):
    # print(f"Solve straight: {A} | {b}")
    x = np.zeros_like(b)
    for i in range(x.shape[0]):
        x[i] = b[i] - x.dot(A[i])
    return x


def _solve_reverse(A, b):
    # print(f"Solve reverse: {A} | {b}")
    x = np.zeros_like(b)
    for i in range(b.shape[0] - 1, -1, -1):
        if A[i][i] != 0:
            x[i] = (b[i] - x.dot(A[i])) / A[i][i]
    return x 


def solve(A, b):
    P, L, U = _get_PLU(A)
    # print(f'L={L}\nU={U}')
    y = _solve_straight(L, P @ b)
    x = _solve_reverse(U, y)
    return L, U, P, x


def solve_and_compare(A, b):
    A = A.astype(float)
    b = b.astype(float)
    # print(f"A={A}\nb={b}")

    _, _, _, my_solution = solve(A, b)
    np_solution = np.linalg.solve(A, b)
    diff = np.linalg.norm(my_solution - np_solution)

    # print(f'my solution: {my_solution}')
    # print(f'np_solution: {np_solution}')
    print(f'diff: {diff}')
    print()

    return diff


N = 10
A = np.zeros((N, N))
for i in range(N):
    for j in range(N):
        A[i, j] = 1 / (i + j + 1)
# A = np.random.rand(N, N)
correct_x = np.random.rand(N)
b = A @ correct_x
solve_and_compare(A, b)


# # Test 2x2
# A = np.array([[1, 2], [3, 5]])
# b = np.array([1, 2])
# solve_and_compare(A, b)

# # Test 3x3
# A = np.array([
#     [-6, -1, 4],
#     [1, -3, 2],
#     [6, 2, -5],
# ])
# b = np.array([-21, 13, 18])
# solve_and_compare(A, b)

# # Test large
# A = np.array([[8., 0., 9., 8., 8., 3., 4., 3., 4., 5., 2., 7., 3., 1., 0., 6., 6., 7., 0., 0., 6., 9., 3., 9., 7., 3., 5., 1., 5., 6.],
#      [7., 2., 1., 5., 7., 6., 9., 7., 2., 5., 6., 7., 0., 4., 8., 9., 1., 0., 0., 7., 3., 9., 5., 7., 1., 5., 4., 4., 1., 3.],
#      [1., 3., 8., 3., 3., 7., 0., 5., 8., 8., 4., 2., 8., 8., 7., 5., 1., 8., 3., 2., 5., 9., 8., 9., 0., 2., 4., 9., 0., 0.],
#      [5., 9., 0., 1., 5., 8., 8., 4., 5., 2., 7., 0., 9., 2., 1., 4., 4., 7., 4., 9., 5., 0., 7., 0., 4., 9., 6., 2., 6., 5.],
#      [8., 9., 4., 8., 0., 7., 9., 4., 3., 9., 9., 4., 3., 4., 5., 2., 0., 3., 1., 6., 2., 0., 7., 5., 8., 2., 6., 4., 4., 0.],
#      [5., 9., 8., 2., 3., 6., 7., 6., 7., 0., 4., 8., 5., 7., 1., 2., 2., 9., 7., 4., 3., 0., 2., 7., 8., 2., 4., 8., 7., 4.],
#      [1., 4., 6., 7., 8., 1., 4., 1., 3., 7., 8., 9., 7., 3., 7., 1., 9., 1., 6., 6., 0., 4., 8., 4., 9., 8., 5., 3., 9., 7.],
#      [5., 8., 4., 3., 6., 2., 0., 2., 3., 3., 0., 3., 7., 0., 8., 4., 1., 3., 7., 1., 4., 0., 8., 9., 6., 0., 3., 3., 7., 6.],
#      [1., 1., 3., 5., 9., 4., 4., 0., 1., 7., 2., 3., 3., 9., 9., 4., 9., 8., 2., 3., 7., 7., 7., 8., 6., 0., 8., 7., 7., 4.],
#      [2., 4., 0., 4., 9., 6., 4., 1., 3., 1., 6., 2., 8., 6., 0., 8., 7., 0., 3., 6., 3., 2., 1., 5., 7., 9., 3., 6., 2., 8.],
#      [3., 6., 9., 6., 1., 8., 8., 5., 8., 1., 5., 7., 6., 3., 5., 7., 2., 3., 0., 4., 4., 0., 3., 1., 8., 2., 6., 9., 5., 5.],
#      [9., 8., 2., 1., 1., 3., 1., 5., 0., 3., 6., 3., 5., 1., 2., 3., 2., 4., 1., 7., 3., 6., 7., 5., 7., 1., 7., 8., 7., 8.],
#      [8., 8., 5., 1., 8., 5., 1., 6., 6., 8., 2., 0., 0., 4., 5., 8., 7., 8., 7., 1., 0., 8., 8., 2., 8., 9., 6., 1., 6., 3.],
#      [8., 6., 7., 9., 6., 1., 4., 6., 2., 2., 2., 9., 0., 4., 9., 4., 7., 4., 8., 0., 9., 5., 8., 3., 8., 9., 2., 5., 9., 3.],
#      [7., 9., 1., 4., 2., 1., 5., 1., 3., 8., 3., 1., 7., 5., 9., 2., 0., 5., 8., 5., 3., 3., 3., 6., 3., 7., 2., 5., 8., 3.],
#      [8., 5., 5., 9., 6., 0., 5., 2., 4., 8., 0., 6., 3., 6., 6., 5., 2., 3., 6., 0., 9., 8., 7., 6., 3., 5., 2., 8., 8., 9.],
#      [3., 0., 6., 2., 0., 6., 0., 4., 2., 8., 2., 3., 0., 1., 9., 1., 7., 7., 8., 2., 5., 9., 2., 2., 1., 8., 1., 9., 3., 8.],
#      [3., 0., 7., 6., 8., 3., 5., 6., 7., 8., 4., 0., 3., 5., 0., 3., 9., 1., 7., 8., 9., 1., 2., 9., 3., 7., 0., 3., 9., 4.],
#      [1., 3., 6., 4., 0., 6., 1., 5., 0., 8., 1., 1., 6., 0., 5., 9., 6., 3., 1., 3., 0., 3., 3., 5., 4., 5., 6., 0., 0., 7.],
#      [6., 3., 2., 0., 4., 8., 2., 1., 1., 0., 6., 0., 5., 8., 5., 6., 4., 8., 1., 4., 4., 9., 3., 2., 1., 1., 6., 7., 9., 9.],
#      [3., 7., 6., 4., 7., 3., 7., 0., 8., 0., 0., 5., 5., 5., 9., 8., 6., 6., 7., 1., 0., 1., 6., 9., 7., 9., 1., 5., 3., 6.],
#      [6., 9., 7., 8., 9., 7., 8., 0., 5., 1., 8., 8., 9., 8., 6., 7., 5., 1., 0., 6., 3., 1., 5., 6., 9., 1., 9., 8., 5., 0.],
#      [9., 0., 6., 4., 4., 8., 7., 2., 1., 0., 1., 3., 4., 8., 7., 7., 1., 3., 0., 5., 9., 0., 5., 7., 7., 5., 8., 6., 8., 9.],
#      [1., 9., 3., 4., 7., 2., 1., 8., 5., 7., 0., 6., 3., 2., 6., 0., 1., 9., 3., 8., 4., 7., 5., 9., 4., 4., 0., 8., 0., 9.],
#      [9., 9., 4., 1., 7., 8., 6., 9., 4., 8., 6., 4., 4., 8., 2., 8., 9., 0., 7., 3., 9., 9., 3., 3., 7., 2., 2., 4., 4., 0.],
#      [7., 8., 2., 7., 4., 5., 9., 7., 3., 7., 6., 5., 2., 7., 6., 3., 7., 5., 8., 3., 8., 5., 8., 5., 9., 8., 5., 0., 5., 6.],
#      [7., 0., 9., 1., 1., 9., 2., 6., 1., 9., 5., 0., 3., 7., 2., 4., 9., 5., 2., 9., 2., 8., 8., 3., 9., 2., 6., 3., 8., 0.],
#      [2., 4., 6., 2., 5., 3., 7., 1., 5., 6., 4., 6., 9., 4., 4., 6., 4., 2., 8., 7., 8., 7., 5., 1., 5., 7., 1., 9., 7., 4.],
#      [2., 9., 0., 8., 2., 1., 7., 8., 7., 2., 6., 9., 3., 9., 7., 0., 6., 7., 9., 0., 9., 0., 7., 3., 5., 4., 0., 8., 5., 3.],
#      [6., 8., 3., 1., 6., 9., 7., 7., 1., 1., 9., 4., 0., 4., 4., 8., 9., 2., 3., 2., 4., 3., 8., 8., 8., 2., 9., 9., 1., 8.]])
# b = np.array([652., 590., 626., 508., 501., 598., 758., 577., 744., 559., 566., 511., 592., 746., 559., 779., 565., 686., 462., 541., 707., 711., 643., 610., 675., 725., 583., 720., 639., 677.])
# solve_and_compare(A, b)
